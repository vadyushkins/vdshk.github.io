<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hash Function | vdshk blog</title><link>https://vdshk.me/ru/tag/hash-function/</link><atom:link href="https://vdshk.me/ru/tag/hash-function/index.xml" rel="self" type="application/rss+xml"/><description>Hash Function</description><generator>Wowchemy (https://wowchemy.com)</generator><language>ru-ru</language><copyright>© 2021 Vadim Abzalov</copyright><lastBuildDate>Mon, 08 Nov 2021 09:47:24 +0300</lastBuildDate><image><url>https://vdshk.me/media/icon_hua908ffaee85184b139d79f55f9be504d_127086_512x512_fill_lanczos_center_3.png</url><title>Hash Function</title><link>https://vdshk.me/ru/tag/hash-function/</link></image><item><title>LeetCode 535</title><link>https://vdshk.me/ru/post/leetcode-535/</link><pubDate>Mon, 08 Nov 2021 09:47:24 +0300</pubDate><guid>https://vdshk.me/ru/post/leetcode-535/</guid><description>&lt;blockquote>
&lt;p>🙏 Спасибо LeetCode за замечательную задачу &lt;a href="https://leetcode.com/problems/encode-and-decode-tinyurl/" target="_blank" rel="noopener">&amp;ldquo;535. Encode and Decode TinyURL&amp;rdquo;&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;details class="toc-inpage d-print-none " open>
&lt;summary class="font-weight-bold">Содержание&lt;/summary>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#задача">Задача&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#ограничения">Ограничения&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#примеры">Примеры&lt;/a>&lt;/li>
&lt;li>&lt;a href="#решение">Решение&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/details>
&lt;h2 id="задача">Задача&lt;/h2>
&lt;p>&lt;code>TinyURL&lt;/code> - это сервис сокращения URL-адресов, в котором вы вводите URL-адрес, например
&lt;code>https://vdshk.me/ru/post/leetcode-535&lt;/code> и получаете короткий URL-адрес, например
&lt;code>https://tinyurl.com/9wa38tpk&lt;/code>.
В этой задаче от вас требуется разработать класс для кодирования и декодирования URL-адреса.&lt;/p>
&lt;p>Нет никаких ограничений на то, как должен работать ваш класс.
Вам просто нужно убедиться, что URL-адрес можно закодировать в короткий URL, а короткий
URL можно декодировать в исходный URL-адрес.&lt;/p>
&lt;p>Реализуйте класс &lt;code>Solution&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Solution()&lt;/code> инициализирует объект в системе&lt;/li>
&lt;li>&lt;code>String encode(String longUrl)&lt;/code> возвращает короткий URL по данному URL-адресу&lt;/li>
&lt;li>&lt;code>String decode(String shortUrl)&lt;/code> возвращает исходный URL-адрес по короткому URL
(гарантируется, что &lt;code>shortUrl&lt;/code> закодирован тем же объектом)&lt;/li>
&lt;/ul>
&lt;h3 id="ограничения">Ограничения&lt;/h3>
&lt;ul>
&lt;li>$1 \leq \text{url.length} \leq 10^4$&lt;/li>
&lt;li>гарантируется, что &lt;code>url&lt;/code> - корректный URL-адрес&lt;/li>
&lt;/ul>
&lt;h2 id="примеры">Примеры&lt;/h2>
&lt;pre>&lt;code class="language-text">Input: &amp;quot;https://vdshk.me/ru/post/leetcode-535&amp;quot;
Output: &amp;quot;https://vdshk.me/ru/post/leetcode-535&amp;quot;
Explanation:
// создаём объект для кодирования/декодирования
Solution obj = new Solution();
// tiny - закодированный url
string tiny = obj.encode(url);
// ans - декодированный tiny; должен совпасть с url
string ans = obj.decode(tiny);
&lt;/code>&lt;/pre>
&lt;h2 id="решение">Решение&lt;/h2>
&lt;blockquote>
&lt;p>Нет никаких ограничений на то, как должен работать ваш класс.&lt;/p>
&lt;/blockquote>
&lt;p>Значит, вместо &lt;code>encode&lt;/code> и &lt;code>decode&lt;/code> можно использовать &lt;code>id&lt;/code>.
То есть возвращать то, что получаем.&lt;/p>
&lt;details class="spoiler " id="spoiler-1">
&lt;summary>Python&lt;/summary>
&lt;p>&lt;pre>&lt;code class="language-python">class Codec:
def encode(self, longUrl: str) -&amp;gt; str:
&amp;quot;&amp;quot;&amp;quot;Encodes a URL to a shortened URL.
&amp;quot;&amp;quot;&amp;quot;
return longUrl
def decode(self, shortUrl: str) -&amp;gt; str:
&amp;quot;&amp;quot;&amp;quot;Decodes a shortened URL to its original URL.
&amp;quot;&amp;quot;&amp;quot;
return shortUrl
# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.decode(codec.encode(url))
&lt;/code>&lt;/pre>
&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-2">
&lt;summary>C++&lt;/summary>
&lt;p>&lt;pre>&lt;code class="language-cpp">#include &amp;lt;bits/stdc++.h&amp;gt;
#define len(a) (int)a.size()
using namespace std;
typedef string str;
class Solution {
public:
// Encodes a URL to a shortened URL.
string encode(string longUrl) {
return longUrl;
}
// Decodes a shortened URL to its original URL.
string decode(string shortUrl) {
return shortUrl;
}
};
// Your Solution object will be instantiated and called as such:
// Solution solution;
// solution.decode(solution.encode(url));
&lt;/code>&lt;/pre>
&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-3">
&lt;summary>JavaScript&lt;/summary>
&lt;p>&lt;pre>&lt;code class="language-javascript">/**
* Encodes a URL to a shortened URL.
*
* @param {string} longUrl
* @return {string}
*/
const encode = function (longUrl) {
return longUrl;
};
/**
* Decodes a shortened URL to its original URL.
*
* @param {string} shortUrl
* @return {string}
*/
const decode = function (shortUrl) {
return shortUrl;
};
/**
* Your functions will be called as such:
* decode(encode(url));
*/
&lt;/code>&lt;/pre>
&lt;/p>
&lt;/details></description></item></channel></rss>